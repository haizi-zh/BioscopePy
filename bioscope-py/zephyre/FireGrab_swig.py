# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
This is the python wrapper for AVT FireGrab library.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FireGrab_swig', [dirname(__file__)])
        except ImportError:
            import _FireGrab_swig
            return _FireGrab_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_FireGrab_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FireGrab_swig = swig_import_helper()
    del swig_import_helper
else:
    import _FireGrab_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def cdata(*args):
  return _FireGrab_swig.cdata(*args)
cdata = _FireGrab_swig.cdata

def memmove(*args):
  return _FireGrab_swig.memmove(*args)
memmove = _FireGrab_swig.memmove

def new_charArray(*args):
  return _FireGrab_swig.new_charArray(*args)
new_charArray = _FireGrab_swig.new_charArray

def delete_charArray(*args):
  return _FireGrab_swig.delete_charArray(*args)
delete_charArray = _FireGrab_swig.delete_charArray

def charArray_getitem(*args):
  return _FireGrab_swig.charArray_getitem(*args)
charArray_getitem = _FireGrab_swig.charArray_getitem

def charArray_setitem(*args):
  return _FireGrab_swig.charArray_setitem(*args)
charArray_setitem = _FireGrab_swig.charArray_setitem

def MakeImageFormat(*args):
  """MakeImageFormat(int Res, int Col, int RateOrMode) -> UINT32"""
  return _FireGrab_swig.MakeImageFormat(*args)

def test(*args):
  """test(FGFRAME pFrame, int n) -> unsigned int"""
  return _FireGrab_swig.test(*args)
FGF_INVALID = _FireGrab_swig.FGF_INVALID
FGF_LAST = _FireGrab_swig.FGF_LAST
FGF_DMAHALTED = _FireGrab_swig.FGF_DMAHALTED
FGF_FORCEPOST = _FireGrab_swig.FGF_FORCEPOST
BC_INFINITE = _FireGrab_swig.BC_INFINITE
BC_ONESHOT = _FireGrab_swig.BC_ONESHOT
RES_160_120 = _FireGrab_swig.RES_160_120
RES_320_240 = _FireGrab_swig.RES_320_240
RES_640_480 = _FireGrab_swig.RES_640_480
RES_800_600 = _FireGrab_swig.RES_800_600
RES_1024_768 = _FireGrab_swig.RES_1024_768
RES_1280_960 = _FireGrab_swig.RES_1280_960
RES_1600_1200 = _FireGrab_swig.RES_1600_1200
RES_SCALABLE = _FireGrab_swig.RES_SCALABLE
RES_LAST = _FireGrab_swig.RES_LAST
CM_Y8 = _FireGrab_swig.CM_Y8
CM_YUV411 = _FireGrab_swig.CM_YUV411
CM_YUV422 = _FireGrab_swig.CM_YUV422
CM_YUV444 = _FireGrab_swig.CM_YUV444
CM_RGB8 = _FireGrab_swig.CM_RGB8
CM_Y16 = _FireGrab_swig.CM_Y16
CM_RGB16 = _FireGrab_swig.CM_RGB16
CM_SY16 = _FireGrab_swig.CM_SY16
CM_SRGB16 = _FireGrab_swig.CM_SRGB16
CM_RAW8 = _FireGrab_swig.CM_RAW8
CM_RAW16 = _FireGrab_swig.CM_RAW16
CM_LAST = _FireGrab_swig.CM_LAST
FR_1_875 = _FireGrab_swig.FR_1_875
FR_3_75 = _FireGrab_swig.FR_3_75
FR_7_5 = _FireGrab_swig.FR_7_5
FR_15 = _FireGrab_swig.FR_15
FR_30 = _FireGrab_swig.FR_30
FR_60 = _FireGrab_swig.FR_60
FR_120 = _FireGrab_swig.FR_120
FR_240 = _FireGrab_swig.FR_240
FR_LAST = _FireGrab_swig.FR_LAST
DMA_CONTINOUS = _FireGrab_swig.DMA_CONTINOUS
DMA_LIMP = _FireGrab_swig.DMA_LIMP
DMA_REPLACE = _FireGrab_swig.DMA_REPLACE
DMA_LAST = _FireGrab_swig.DMA_LAST
BP_RGGB = _FireGrab_swig.BP_RGGB
BP_GRBG = _FireGrab_swig.BP_GRBG
BP_BGGR = _FireGrab_swig.BP_BGGR
BP_GBRG = _FireGrab_swig.BP_GBRG
BP_LAST = _FireGrab_swig.BP_LAST
FGPS_INVALID = _FireGrab_swig.FGPS_INVALID
FGPS_FEATUREINFO = _FireGrab_swig.FGPS_FEATUREINFO
FGPS_TRIGGERINFO = _FireGrab_swig.FGPS_TRIGGERINFO
FGPS_COLORFORMAT = _FireGrab_swig.FGPS_COLORFORMAT
FGPS_LAST = _FireGrab_swig.FGPS_LAST
FCE_NOERROR = _FireGrab_swig.FCE_NOERROR
FCE_ALREADYOPENED = _FireGrab_swig.FCE_ALREADYOPENED
FCE_NOTOPENED = _FireGrab_swig.FCE_NOTOPENED
FCE_NODETAILS = _FireGrab_swig.FCE_NODETAILS
FCE_DRVNOTINSTALLED = _FireGrab_swig.FCE_DRVNOTINSTALLED
FCE_MISSINGBUFFERS = _FireGrab_swig.FCE_MISSINGBUFFERS
FCE_INPARMS = _FireGrab_swig.FCE_INPARMS
FCE_CREATEDEVICE = _FireGrab_swig.FCE_CREATEDEVICE
FCE_WINERROR = _FireGrab_swig.FCE_WINERROR
FCE_IOCTL = _FireGrab_swig.FCE_IOCTL
FCE_DRVRETURNLENGTH = _FireGrab_swig.FCE_DRVRETURNLENGTH
FCE_INVALIDHANDLE = _FireGrab_swig.FCE_INVALIDHANDLE
FCE_NOTIMPLEMENTED = _FireGrab_swig.FCE_NOTIMPLEMENTED
FCE_DRVRUNNING = _FireGrab_swig.FCE_DRVRUNNING
FCE_STARTERROR = _FireGrab_swig.FCE_STARTERROR
FCE_INSTALLERROR = _FireGrab_swig.FCE_INSTALLERROR
FCE_DRVVERSION = _FireGrab_swig.FCE_DRVVERSION
FCE_NODEADDRESS = _FireGrab_swig.FCE_NODEADDRESS
FCE_PARTIAL = _FireGrab_swig.FCE_PARTIAL
FCE_NOMEM = _FireGrab_swig.FCE_NOMEM
FCE_NOTAVAILABLE = _FireGrab_swig.FCE_NOTAVAILABLE
FCE_NOTCONNECTED = _FireGrab_swig.FCE_NOTCONNECTED
FCE_ADJUSTED = _FireGrab_swig.FCE_ADJUSTED
HALER_NOERROR = _FireGrab_swig.HALER_NOERROR
HALER_NOCARD = _FireGrab_swig.HALER_NOCARD
HALER_NONTDEVICE = _FireGrab_swig.HALER_NONTDEVICE
HALER_NOMEM = _FireGrab_swig.HALER_NOMEM
HALER_MODE = _FireGrab_swig.HALER_MODE
HALER_TIMEOUT = _FireGrab_swig.HALER_TIMEOUT
HALER_ALREADYSTARTED = _FireGrab_swig.HALER_ALREADYSTARTED
HALER_NOTSTARTED = _FireGrab_swig.HALER_NOTSTARTED
HALER_BUSY = _FireGrab_swig.HALER_BUSY
HALER_NORESOURCES = _FireGrab_swig.HALER_NORESOURCES
HALER_NODATA = _FireGrab_swig.HALER_NODATA
HALER_NOACK = _FireGrab_swig.HALER_NOACK
HALER_NOIRQ = _FireGrab_swig.HALER_NOIRQ
HALER_NOBUSRESET = _FireGrab_swig.HALER_NOBUSRESET
HALER_NOLICENSE = _FireGrab_swig.HALER_NOLICENSE
HALER_RCODEOTHER = _FireGrab_swig.HALER_RCODEOTHER
HALER_PENDING = _FireGrab_swig.HALER_PENDING
HALER_INPARMS = _FireGrab_swig.HALER_INPARMS
HALER_CHIPVERSION = _FireGrab_swig.HALER_CHIPVERSION
HALER_HARDWARE = _FireGrab_swig.HALER_HARDWARE
HALER_NOTIMPLEMENTED = _FireGrab_swig.HALER_NOTIMPLEMENTED
HALER_CANCELLED = _FireGrab_swig.HALER_CANCELLED
HALER_NOTLOCKED = _FireGrab_swig.HALER_NOTLOCKED
HALER_GENERATIONCNT = _FireGrab_swig.HALER_GENERATIONCNT
HALER_NOISOMANAGER = _FireGrab_swig.HALER_NOISOMANAGER
HALER_NOBUSMANAGER = _FireGrab_swig.HALER_NOBUSMANAGER
HALER_UNEXPECTED = _FireGrab_swig.HALER_UNEXPECTED
HALER_REMOVED = _FireGrab_swig.HALER_REMOVED
HALER_NOBUSRESOURCES = _FireGrab_swig.HALER_NOBUSRESOURCES
HALER_DMAHALTED = _FireGrab_swig.HALER_DMAHALTED
PS_100MBIT = _FireGrab_swig.PS_100MBIT
PS_200MBIT = _FireGrab_swig.PS_200MBIT
PS_400MBIT = _FireGrab_swig.PS_400MBIT
PS_800MBIT = _FireGrab_swig.PS_800MBIT
PS_AUTO = _FireGrab_swig.PS_AUTO
PS_LAST = _FireGrab_swig.PS_LAST
FGP_IMAGEFORMAT = _FireGrab_swig.FGP_IMAGEFORMAT
FGP_ENUMIMAGEFORMAT = _FireGrab_swig.FGP_ENUMIMAGEFORMAT
FGP_BRIGHTNESS = _FireGrab_swig.FGP_BRIGHTNESS
FGP_AUTOEXPOSURE = _FireGrab_swig.FGP_AUTOEXPOSURE
FGP_SHARPNESS = _FireGrab_swig.FGP_SHARPNESS
FGP_WHITEBALCB = _FireGrab_swig.FGP_WHITEBALCB
FGP_WHITEBALCR = _FireGrab_swig.FGP_WHITEBALCR
FGP_HUE = _FireGrab_swig.FGP_HUE
FGP_SATURATION = _FireGrab_swig.FGP_SATURATION
FGP_GAMMA = _FireGrab_swig.FGP_GAMMA
FGP_SHUTTER = _FireGrab_swig.FGP_SHUTTER
FGP_GAIN = _FireGrab_swig.FGP_GAIN
FGP_IRIS = _FireGrab_swig.FGP_IRIS
FGP_FOCUS = _FireGrab_swig.FGP_FOCUS
FGP_TEMPERATURE = _FireGrab_swig.FGP_TEMPERATURE
FGP_TRIGGER = _FireGrab_swig.FGP_TRIGGER
FGP_TRIGGERDLY = _FireGrab_swig.FGP_TRIGGERDLY
FGP_WHITESHD = _FireGrab_swig.FGP_WHITESHD
FGP_FRAMERATE = _FireGrab_swig.FGP_FRAMERATE
FGP_ZOOM = _FireGrab_swig.FGP_ZOOM
FGP_PAN = _FireGrab_swig.FGP_PAN
FGP_TILT = _FireGrab_swig.FGP_TILT
FGP_OPTICALFILTER = _FireGrab_swig.FGP_OPTICALFILTER
FGP_CAPTURESIZE = _FireGrab_swig.FGP_CAPTURESIZE
FGP_CAPTUREQUALITY = _FireGrab_swig.FGP_CAPTUREQUALITY
FGP_PHYSPEED = _FireGrab_swig.FGP_PHYSPEED
FGP_XSIZE = _FireGrab_swig.FGP_XSIZE
FGP_YSIZE = _FireGrab_swig.FGP_YSIZE
FGP_XPOSITION = _FireGrab_swig.FGP_XPOSITION
FGP_YPOSITION = _FireGrab_swig.FGP_YPOSITION
FGP_PACKETSIZE = _FireGrab_swig.FGP_PACKETSIZE
FGP_DMAMODE = _FireGrab_swig.FGP_DMAMODE
FGP_BURSTCOUNT = _FireGrab_swig.FGP_BURSTCOUNT
FGP_FRAMEBUFFERCOUNT = _FireGrab_swig.FGP_FRAMEBUFFERCOUNT
FGP_USEIRMFORBW = _FireGrab_swig.FGP_USEIRMFORBW
FGP_ADJUSTPARAMETERS = _FireGrab_swig.FGP_ADJUSTPARAMETERS
FGP_STARTIMMEDIATELY = _FireGrab_swig.FGP_STARTIMMEDIATELY
FGP_FRAMEMEMORYSIZE = _FireGrab_swig.FGP_FRAMEMEMORYSIZE
FGP_COLORFORMAT = _FireGrab_swig.FGP_COLORFORMAT
FGP_IRMFREEBW = _FireGrab_swig.FGP_IRMFREEBW
FGP_DO_FASTTRIGGER = _FireGrab_swig.FGP_DO_FASTTRIGGER
FGP_DO_BUSTRIGGER = _FireGrab_swig.FGP_DO_BUSTRIGGER
FGP_RESIZE = _FireGrab_swig.FGP_RESIZE
FGP_USEIRMFORCHN = _FireGrab_swig.FGP_USEIRMFORCHN
FGP_CAMACCEPTDELAY = _FireGrab_swig.FGP_CAMACCEPTDELAY
FGP_ISOCHANNEL = _FireGrab_swig.FGP_ISOCHANNEL
FGP_CYCLETIME = _FireGrab_swig.FGP_CYCLETIME
FGP_DORESET = _FireGrab_swig.FGP_DORESET
FGP_DMAFLAGS = _FireGrab_swig.FGP_DMAFLAGS
FGP_R0C = _FireGrab_swig.FGP_R0C
FGP_BUSADDRESS = _FireGrab_swig.FGP_BUSADDRESS
FGP_CMDTIMEOUT = _FireGrab_swig.FGP_CMDTIMEOUT
FGP_CARD = _FireGrab_swig.FGP_CARD
FGP_LICENSEINFO = _FireGrab_swig.FGP_LICENSEINFO
FGP_PACKETCOUNT = _FireGrab_swig.FGP_PACKETCOUNT
FGP_DO_MULTIBUSTRIGGER = _FireGrab_swig.FGP_DO_MULTIBUSTRIGGER
FGP_CARDRESET = _FireGrab_swig.FGP_CARDRESET
FGP_LAST = _FireGrab_swig.FGP_LAST
class FGPINFO(_object):
    """Proxy of C++ FGPINFO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FGPINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FGPINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IsValue"] = _FireGrab_swig.FGPINFO_IsValue_set
    __swig_getmethods__["IsValue"] = _FireGrab_swig.FGPINFO_IsValue_get
    if _newclass:IsValue = _swig_property(_FireGrab_swig.FGPINFO_IsValue_get, _FireGrab_swig.FGPINFO_IsValue_set)
    __swig_setmethods__["MinValue"] = _FireGrab_swig.FGPINFO_MinValue_set
    __swig_getmethods__["MinValue"] = _FireGrab_swig.FGPINFO_MinValue_get
    if _newclass:MinValue = _swig_property(_FireGrab_swig.FGPINFO_MinValue_get, _FireGrab_swig.FGPINFO_MinValue_set)
    __swig_setmethods__["MaxValue"] = _FireGrab_swig.FGPINFO_MaxValue_set
    __swig_getmethods__["MaxValue"] = _FireGrab_swig.FGPINFO_MaxValue_get
    if _newclass:MaxValue = _swig_property(_FireGrab_swig.FGPINFO_MaxValue_get, _FireGrab_swig.FGPINFO_MaxValue_set)
    __swig_setmethods__["Unit"] = _FireGrab_swig.FGPINFO_Unit_set
    __swig_getmethods__["Unit"] = _FireGrab_swig.FGPINFO_Unit_get
    if _newclass:Unit = _swig_property(_FireGrab_swig.FGPINFO_Unit_get, _FireGrab_swig.FGPINFO_Unit_set)
    __swig_setmethods__["Specific"] = _FireGrab_swig.FGPINFO_Specific_set
    __swig_getmethods__["Specific"] = _FireGrab_swig.FGPINFO_Specific_get
    if _newclass:Specific = _swig_property(_FireGrab_swig.FGPINFO_Specific_get, _FireGrab_swig.FGPINFO_Specific_set)
    def __init__(self): 
        """__init__(self) -> FGPINFO"""
        this = _FireGrab_swig.new_FGPINFO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FireGrab_swig.delete_FGPINFO
    __del__ = lambda self : None;
FGPINFO_swigregister = _FireGrab_swig.FGPINFO_swigregister
FGPINFO_swigregister(FGPINFO)

class UINT32HL(_object):
    """Proxy of C++ UINT32HL class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UINT32HL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UINT32HL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Low"] = _FireGrab_swig.UINT32HL_Low_set
    __swig_getmethods__["Low"] = _FireGrab_swig.UINT32HL_Low_get
    if _newclass:Low = _swig_property(_FireGrab_swig.UINT32HL_Low_get, _FireGrab_swig.UINT32HL_Low_set)
    __swig_setmethods__["High"] = _FireGrab_swig.UINT32HL_High_set
    __swig_getmethods__["High"] = _FireGrab_swig.UINT32HL_High_get
    if _newclass:High = _swig_property(_FireGrab_swig.UINT32HL_High_get, _FireGrab_swig.UINT32HL_High_set)
    def __init__(self): 
        """__init__(self) -> UINT32HL"""
        this = _FireGrab_swig.new_UINT32HL()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FireGrab_swig.delete_UINT32HL
    __del__ = lambda self : None;
UINT32HL_swigregister = _FireGrab_swig.UINT32HL_swigregister
UINT32HL_swigregister(UINT32HL)

class FGNODEINFO(_object):
    """Proxy of C++ FGNODEINFO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FGNODEINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FGNODEINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Guid"] = _FireGrab_swig.FGNODEINFO_Guid_set
    __swig_getmethods__["Guid"] = _FireGrab_swig.FGNODEINFO_Guid_get
    if _newclass:Guid = _swig_property(_FireGrab_swig.FGNODEINFO_Guid_get, _FireGrab_swig.FGNODEINFO_Guid_set)
    __swig_setmethods__["CardNumber"] = _FireGrab_swig.FGNODEINFO_CardNumber_set
    __swig_getmethods__["CardNumber"] = _FireGrab_swig.FGNODEINFO_CardNumber_get
    if _newclass:CardNumber = _swig_property(_FireGrab_swig.FGNODEINFO_CardNumber_get, _FireGrab_swig.FGNODEINFO_CardNumber_set)
    __swig_setmethods__["NodeId"] = _FireGrab_swig.FGNODEINFO_NodeId_set
    __swig_getmethods__["NodeId"] = _FireGrab_swig.FGNODEINFO_NodeId_get
    if _newclass:NodeId = _swig_property(_FireGrab_swig.FGNODEINFO_NodeId_get, _FireGrab_swig.FGNODEINFO_NodeId_set)
    __swig_setmethods__["Busy"] = _FireGrab_swig.FGNODEINFO_Busy_set
    __swig_getmethods__["Busy"] = _FireGrab_swig.FGNODEINFO_Busy_get
    if _newclass:Busy = _swig_property(_FireGrab_swig.FGNODEINFO_Busy_get, _FireGrab_swig.FGNODEINFO_Busy_set)
    def __init__(self): 
        """__init__(self) -> FGNODEINFO"""
        this = _FireGrab_swig.new_FGNODEINFO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FireGrab_swig.delete_FGNODEINFO
    __del__ = lambda self : None;
FGNODEINFO_swigregister = _FireGrab_swig.FGNODEINFO_swigregister
FGNODEINFO_swigregister(FGNODEINFO)

class FGFRAME(_object):
    """Proxy of C++ FGFRAME class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FGFRAME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FGFRAME, name)
    __repr__ = _swig_repr
    __swig_setmethods__["System"] = _FireGrab_swig.FGFRAME_System_set
    __swig_getmethods__["System"] = _FireGrab_swig.FGFRAME_System_get
    if _newclass:System = _swig_property(_FireGrab_swig.FGFRAME_System_get, _FireGrab_swig.FGFRAME_System_set)
    __swig_setmethods__["Flags"] = _FireGrab_swig.FGFRAME_Flags_set
    __swig_getmethods__["Flags"] = _FireGrab_swig.FGFRAME_Flags_get
    if _newclass:Flags = _swig_property(_FireGrab_swig.FGFRAME_Flags_get, _FireGrab_swig.FGFRAME_Flags_set)
    __swig_setmethods__["Id"] = _FireGrab_swig.FGFRAME_Id_set
    __swig_getmethods__["Id"] = _FireGrab_swig.FGFRAME_Id_get
    if _newclass:Id = _swig_property(_FireGrab_swig.FGFRAME_Id_get, _FireGrab_swig.FGFRAME_Id_set)
    __swig_setmethods__["pData"] = _FireGrab_swig.FGFRAME_pData_set
    __swig_getmethods__["pData"] = _FireGrab_swig.FGFRAME_pData_get
    if _newclass:pData = _swig_property(_FireGrab_swig.FGFRAME_pData_get, _FireGrab_swig.FGFRAME_pData_set)
    __swig_setmethods__["Length"] = _FireGrab_swig.FGFRAME_Length_set
    __swig_getmethods__["Length"] = _FireGrab_swig.FGFRAME_Length_get
    if _newclass:Length = _swig_property(_FireGrab_swig.FGFRAME_Length_get, _FireGrab_swig.FGFRAME_Length_set)
    __swig_setmethods__["RxTime"] = _FireGrab_swig.FGFRAME_RxTime_set
    __swig_getmethods__["RxTime"] = _FireGrab_swig.FGFRAME_RxTime_get
    if _newclass:RxTime = _swig_property(_FireGrab_swig.FGFRAME_RxTime_get, _FireGrab_swig.FGFRAME_RxTime_set)
    __swig_setmethods__["BeginCycleTime"] = _FireGrab_swig.FGFRAME_BeginCycleTime_set
    __swig_getmethods__["BeginCycleTime"] = _FireGrab_swig.FGFRAME_BeginCycleTime_get
    if _newclass:BeginCycleTime = _swig_property(_FireGrab_swig.FGFRAME_BeginCycleTime_get, _FireGrab_swig.FGFRAME_BeginCycleTime_set)
    __swig_setmethods__["EndCycleTime"] = _FireGrab_swig.FGFRAME_EndCycleTime_set
    __swig_getmethods__["EndCycleTime"] = _FireGrab_swig.FGFRAME_EndCycleTime_get
    if _newclass:EndCycleTime = _swig_property(_FireGrab_swig.FGFRAME_EndCycleTime_get, _FireGrab_swig.FGFRAME_EndCycleTime_set)
    __swig_setmethods__["Reserved"] = _FireGrab_swig.FGFRAME_Reserved_set
    __swig_getmethods__["Reserved"] = _FireGrab_swig.FGFRAME_Reserved_get
    if _newclass:Reserved = _swig_property(_FireGrab_swig.FGFRAME_Reserved_get, _FireGrab_swig.FGFRAME_Reserved_set)
    def __init__(self): 
        """__init__(self) -> FGFRAME"""
        this = _FireGrab_swig.new_FGFRAME()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FireGrab_swig.delete_FGFRAME
    __del__ = lambda self : None;
FGFRAME_swigregister = _FireGrab_swig.FGFRAME_swigregister
FGFRAME_swigregister(FGFRAME)


def new_FGNodeInfoArray(*args):
  """new_FGNodeInfoArray(size_t nelements) -> FGNODEINFO"""
  return _FireGrab_swig.new_FGNodeInfoArray(*args)

def delete_FGNodeInfoArray(*args):
  """delete_FGNodeInfoArray(FGNODEINFO ary)"""
  return _FireGrab_swig.delete_FGNodeInfoArray(*args)

def FGNodeInfoArray_getitem(*args):
  """FGNodeInfoArray_getitem(FGNODEINFO ary, size_t index) -> FGNODEINFO"""
  return _FireGrab_swig.FGNodeInfoArray_getitem(*args)

def FGNodeInfoArray_setitem(*args):
  """FGNodeInfoArray_setitem(FGNODEINFO ary, size_t index, FGNODEINFO value)"""
  return _FireGrab_swig.FGNodeInfoArray_setitem(*args)

def FGInitModule():
  """FGInitModule() -> UINT32"""
  return _FireGrab_swig.FGInitModule()

def FGExitModule():
  """FGExitModule()"""
  return _FireGrab_swig.FGExitModule()

def FGGetNodeList(*args):
  """FGGetNodeList(FGNODEINFO pInfo, UINT32 MaxCnt) -> UINT32"""
  return _FireGrab_swig.FGGetNodeList(*args)

def FGGetHostLicenseRequest(*args):
  """FGGetHostLicenseRequest(char pStr) -> UINT32"""
  return _FireGrab_swig.FGGetHostLicenseRequest(*args)

def FGGetLicenseInfo():
  """FGGetLicenseInfo() -> UINT32"""
  return _FireGrab_swig.FGGetLicenseInfo()

def Deinterlace(*args):
  """
    Deinterlace(FGFRAME pFrame, int method, int width, int height, 
        int scanline, char pData)
    """
  return _FireGrab_swig.Deinterlace(*args)

def DeinterlaceTest(*args):
  """DeinterlaceTest(char pData)"""
  return _FireGrab_swig.DeinterlaceTest(*args)
class CFGCamera(_object):
    """Proxy of C++ CFGCamera class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFGCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFGCamera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CFGCamera"""
        this = _FireGrab_swig.new_CFGCamera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FireGrab_swig.delete_CFGCamera
    __del__ = lambda self : None;
    def WriteRegister(self, *args):
        """WriteRegister(self, UINT32 Address, UINT32 Value) -> UINT32"""
        return _FireGrab_swig.CFGCamera_WriteRegister(self, *args)

    def ReadRegister(self, *args):
        """ReadRegister(self, UINT32 Address, UINT32 pValue) -> UINT32"""
        return _FireGrab_swig.CFGCamera_ReadRegister(self, *args)

    def WriteBlock(self, *args):
        """WriteBlock(self, UINT32 Address, UINT8 pData, UINT32 Length) -> UINT32"""
        return _FireGrab_swig.CFGCamera_WriteBlock(self, *args)

    def ReadBlock(self, *args):
        """ReadBlock(self, UINT32 Address, UINT8 pData, UINT32 Length) -> UINT32"""
        return _FireGrab_swig.CFGCamera_ReadBlock(self, *args)

    def Connect(self, *args):
        """Connect(self, UINT32HL pGuid) -> UINT32"""
        return _FireGrab_swig.CFGCamera_Connect(self, *args)

    def Disconnect(self):
        """Disconnect(self) -> UINT32"""
        return _FireGrab_swig.CFGCamera_Disconnect(self)

    def SetParameter(self, *args):
        """SetParameter(self, UINT16 Which, UINT32 Value) -> UINT32"""
        return _FireGrab_swig.CFGCamera_SetParameter(self, *args)

    def GetParameter(self, *args):
        """GetParameter(self, UINT16 Which, UINT32 pValue) -> UINT32"""
        return _FireGrab_swig.CFGCamera_GetParameter(self, *args)

    def GetParameterInfo(self, *args):
        """GetParameterInfo(self, UINT16 Which, FGPINFO pInfo) -> UINT32"""
        return _FireGrab_swig.CFGCamera_GetParameterInfo(self, *args)

    def OpenCapture(self):
        """OpenCapture(self) -> UINT32"""
        return _FireGrab_swig.CFGCamera_OpenCapture(self)

    def CloseCapture(self):
        """CloseCapture(self) -> UINT32"""
        return _FireGrab_swig.CFGCamera_CloseCapture(self)

    def AssignUserBuffers(self, *args):
        """AssignUserBuffers(self, UINT32 Cnt, UINT32 Size, void ppMemArray) -> UINT32"""
        return _FireGrab_swig.CFGCamera_AssignUserBuffers(self, *args)

    def StartDevice(self):
        """StartDevice(self) -> UINT32"""
        return _FireGrab_swig.CFGCamera_StartDevice(self)

    def StopDevice(self):
        """StopDevice(self) -> UINT32"""
        return _FireGrab_swig.CFGCamera_StopDevice(self)

    def GetFrame(self, *args):
        """
        GetFrame(self, FGFRAME pFrame, UINT32 TimeoutInMs = INFINITE) -> UINT32
        GetFrame(self, FGFRAME pFrame) -> UINT32
        """
        return _FireGrab_swig.CFGCamera_GetFrame(self, *args)

    def PutFrame(self, *args):
        """PutFrame(self, FGFRAME pFrame) -> UINT32"""
        return _FireGrab_swig.CFGCamera_PutFrame(self, *args)

    def DiscardFrames(self):
        """DiscardFrames(self) -> UINT32"""
        return _FireGrab_swig.CFGCamera_DiscardFrames(self)

    def GetDeviceName(self, *args):
        """GetDeviceName(self, char pAll) -> UINT32"""
        return _FireGrab_swig.CFGCamera_GetDeviceName(self, *args)

    def GetContext(self):
        """GetContext(self) -> void"""
        return _FireGrab_swig.CFGCamera_GetContext(self)

    def GetLicenseRequest(self, *args):
        """GetLicenseRequest(self, char pStr) -> UINT32"""
        return _FireGrab_swig.CFGCamera_GetLicenseRequest(self, *args)

CFGCamera_swigregister = _FireGrab_swig.CFGCamera_swigregister
CFGCamera_swigregister(CFGCamera)

class CBroadcast(_object):
    """Proxy of C++ CBroadcast class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBroadcast, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBroadcast, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CFGCamera pFGCamera) -> CBroadcast"""
        this = _FireGrab_swig.new_CBroadcast(*args)
        try: self.this.append(this)
        except: self.this = this
    def WriteRegister(self, *args):
        """WriteRegister(self, UINT32 Address, UINT32 Value) -> UINT32"""
        return _FireGrab_swig.CBroadcast_WriteRegister(self, *args)

    def WriteBlock(self, *args):
        """WriteBlock(self, UINT32 Address, UINT8 pData, UINT32 Length) -> UINT32"""
        return _FireGrab_swig.CBroadcast_WriteBlock(self, *args)

    __swig_destroy__ = _FireGrab_swig.delete_CBroadcast
    __del__ = lambda self : None;
CBroadcast_swigregister = _FireGrab_swig.CBroadcast_swigregister
CBroadcast_swigregister(CBroadcast)

class CFGIsoDma(_object):
    """Proxy of C++ CFGIsoDma class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFGIsoDma, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFGIsoDma, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_pIsoDma"] = _FireGrab_swig.CFGIsoDma_m_pIsoDma_set
    __swig_getmethods__["m_pIsoDma"] = _FireGrab_swig.CFGIsoDma_m_pIsoDma_get
    if _newclass:m_pIsoDma = _swig_property(_FireGrab_swig.CFGIsoDma_m_pIsoDma_get, _FireGrab_swig.CFGIsoDma_m_pIsoDma_set)
    def __init__(self): 
        """__init__(self) -> CFGIsoDma"""
        this = _FireGrab_swig.new_CFGIsoDma()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FireGrab_swig.delete_CFGIsoDma
    __del__ = lambda self : None;
    def OpenCapture(self, *args):
        """OpenCapture(self, FGISODMAPARMS pParms) -> UINT32"""
        return _FireGrab_swig.CFGIsoDma_OpenCapture(self, *args)

    def CloseCapture(self):
        """CloseCapture(self) -> UINT32"""
        return _FireGrab_swig.CFGIsoDma_CloseCapture(self)

    def GetFrame(self, *args):
        """GetFrame(self, FGFRAME pFrame, UINT32 TimeoutInMs) -> UINT32"""
        return _FireGrab_swig.CFGIsoDma_GetFrame(self, *args)

    def PutFrame(self, *args):
        """PutFrame(self, FGFRAME pFrame) -> UINT32"""
        return _FireGrab_swig.CFGIsoDma_PutFrame(self, *args)

    def DiscardFrames(self):
        """DiscardFrames(self) -> UINT32"""
        return _FireGrab_swig.CFGIsoDma_DiscardFrames(self)

    def AssignUserBuffers(self, *args):
        """AssignUserBuffers(self, UINT32 Cnt, UINT32 Size, void ppMemArray) -> UINT32"""
        return _FireGrab_swig.CFGIsoDma_AssignUserBuffers(self, *args)

    def Resize(self, *args):
        """Resize(self, UINT32 PktCnt, UINT32 PktSize) -> UINT32"""
        return _FireGrab_swig.CFGIsoDma_Resize(self, *args)

CFGIsoDma_swigregister = _FireGrab_swig.CFGIsoDma_swigregister
CFGIsoDma_swigregister(CFGIsoDma)

class PVAL(_object):
    """Proxy of C++ PVAL class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVAL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PVAL, name)
    __repr__ = _swig_repr
    PVAL_OFF = _FireGrab_swig.PVAL_PVAL_OFF
    PVAL_AUTO = _FireGrab_swig.PVAL_PVAL_AUTO
    PVAL_ONESHOT = _FireGrab_swig.PVAL_PVAL_ONESHOT
    def __init__(self): 
        """__init__(self) -> PVAL"""
        this = _FireGrab_swig.new_PVAL()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FireGrab_swig.delete_PVAL
    __del__ = lambda self : None;
PVAL_swigregister = _FireGrab_swig.PVAL_swigregister
PVAL_swigregister(PVAL)

# This file is compatible with both classic and new-style classes.


